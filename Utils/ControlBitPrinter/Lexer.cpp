// Lexer.cpp generated by reflex 6.0.0 from D:\Libs\reflex-6.0.0\bin\win64\simple.l

#define REFLEX_VERSION "6.0.0"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define REFLEX_OPTION_class               true
#define REFLEX_OPTION_header_file         "Lexer.h"
#define REFLEX_OPTION_lex                 lex
#define REFLEX_OPTION_lexer               Lexer
#define REFLEX_OPTION_noyywrap            true
#define REFLEX_OPTION_outfile             "Lexer.cpp"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS INCLUDE                                                       //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include "Lexer.h"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %{ user code %}                                                //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 7 "D:\\Libs\\reflex-6.0.0\\bin\\win64\\simple.l"

#include <iostream>
#include <string>


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 2: rules                                                          //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

int Lexer::lex(void)
{
  static const char *REGEX_INITIAL = "(?m)((?:\\Q.ORIGIN\\E))|([A-Z_a-z][0-9A-Z_a-z]*)|((?:\\Q=\\E))|([0-9]+)|((?:\\Q;\\E))|([\\x09\\x0a\\x20]+)|(.)";
  static const reflex::Pattern PATTERN_INITIAL(REGEX_INITIAL);
  if (!has_matcher())
  {
    matcher(new Matcher(PATTERN_INITIAL, stdinit(), this));
  }
  std::string yytext;
  while (true)
  {
        switch (matcher().scan())
        {
          //yytext = matcher().text();

          case 0:
            if (matcher().at_end())
            {
              return int();
            }
            else
            {
              out().put(matcher().input());
            }
            break;
          case 1: // rule D:\Libs\reflex-6.0.0\bin\win64\simple.l:14: ".ORIGIN" :
#line 14 "D:\\Libs\\reflex-6.0.0\\bin\\win64\\simple.l"
{std::cout << "TOKEN: ORIGIN (" << yytext << ")\n";}
            break;
          case 2: // rule D:\Libs\reflex-6.0.0\bin\win64\simple.l:15: [a-zA-Z_][a-zA-Z0-9_]* :
#line 15 "D:\\Libs\\reflex-6.0.0\\bin\\win64\\simple.l"
{ std::cout << "TOKEN: IDENT (" << yytext << ")\n"; }
            break;
          case 3: // rule D:\Libs\reflex-6.0.0\bin\win64\simple.l:16: "=" :
#line 16 "D:\\Libs\\reflex-6.0.0\\bin\\win64\\simple.l"
{ std::cout << "TOKEN: ASSIGN\n"; }
            break;
          case 4: // rule D:\Libs\reflex-6.0.0\bin\win64\simple.l:17: [0-9]+ :
#line 17 "D:\\Libs\\reflex-6.0.0\\bin\\win64\\simple.l"
{ std::cout << "TOKEN: NUMBER (" << yytext << ")\n"; }
            break;
          case 5: // rule D:\Libs\reflex-6.0.0\bin\win64\simple.l:18: ";" :
#line 18 "D:\\Libs\\reflex-6.0.0\\bin\\win64\\simple.l"
{ std::cout << "TOKEN: SEMICOLON\n"; }
            break;
          case 6: // rule D:\Libs\reflex-6.0.0\bin\win64\simple.l:19: [ \t\n]+ :
#line 19 "D:\\Libs\\reflex-6.0.0\\bin\\win64\\simple.l"
{ /* skip whitespace */ }
            break;
          case 7: // rule D:\Libs\reflex-6.0.0\bin\win64\simple.l:20: . :
#line 20 "D:\\Libs\\reflex-6.0.0\\bin\\win64\\simple.l"
{ std::cout << "TOKEN: UNKNOWN (" << yytext << ")\n"; }

            break;
        }
  }
}
