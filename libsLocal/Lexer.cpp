// Lexer.cpp generated by reflex 6.0.0 from D:\ProgrammingProjects\Logisim\32bitCPU_t3\libsLocal\ControlBits.l

#define REFLEX_VERSION "6.0.0"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define REFLEX_OPTION_header_file         "Lexer.h"
#define REFLEX_OPTION_lex                 lex
#define REFLEX_OPTION_lexer               Lexer
#define REFLEX_OPTION_noyywrap            true
#define REFLEX_OPTION_outfile             "Lexer.cpp"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS INCLUDE                                                       //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include "Lexer.h"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %{ user code %}                                                //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 6 "D:\\ProgrammingProjects\\Logisim\\32bitCPU_t3\\libsLocal\\ControlBits.l"

#include <iostream>
#include <string>

#include "CbTokens.h";



////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 2: rules                                                          //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

int Lexer::lex(void)
{
  static const char *REGEX_INITIAL = "(?m)((?:\\QRead\\E))|((?:\\QWrite\\E))|((?:\\QPC_enb\\E))|((?:\\QPC_load\\E))|((?:\\QMDR_we\\E))|((?:\\QMDR_out\\E))|((?:\\QIR_we\\E))|((?:\\QIR_out\\E))|((?:\\QTEMP_we\\E))|((?:\\QTEMP_out\\E))|((?:\\QPosta_we\\E))|((?:\\QPosta_out\\E))|((?:\\QADR_we\\E))|((?:\\QADR_out\\E))|((?:\\QI3B\\E))|((?:\\QMAR_load\\E))|((?:\\QMAR_we\\E))|((?:\\QACC_we\\E))|((?:\\QFR_cls\\E))|((?:\\QALU_in\\E))|((?:\\QALU_out\\E))|((?:\\QREG_out\\E))|((?:\\QREG_in\\E))|((?:\\Q@\\E))|((?:\\Q{\\E))|((?:\\Q}\\E))|((?:\\Q#\\E))|([\\x09\\x0a\\x20]+)|(.)";
  static const reflex::Pattern PATTERN_INITIAL(REGEX_INITIAL);
  if (!has_matcher())
  {
    matcher(new Matcher(PATTERN_INITIAL, stdinit(), this));
  }
  while (true)
  {
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
              return int();
            }
            else
            {
              out().put(matcher().input());
            }
            break;
          case 1: // rule D:\ProgrammingProjects\Logisim\32bitCPU_t3\libsLocal\ControlBits.l:18: "Read" :
#line 18 "D:\\ProgrammingProjects\\Logisim\\32bitCPU_t3\\libsLocal\\ControlBits.l"
return cb::Token{yytext, cb::TokenType::Read};
            break;
          case 2: // rule D:\ProgrammingProjects\Logisim\32bitCPU_t3\libsLocal\ControlBits.l:19: "Write" :
#line 19 "D:\\ProgrammingProjects\\Logisim\\32bitCPU_t3\\libsLocal\\ControlBits.l"
return cb::Token{yytext, cb::TokenType::Write};

            break;
          case 3: // rule D:\ProgrammingProjects\Logisim\32bitCPU_t3\libsLocal\ControlBits.l:21: "PC_enb" :
#line 21 "D:\\ProgrammingProjects\\Logisim\\32bitCPU_t3\\libsLocal\\ControlBits.l"
return cb::Token{yytext, cb::TokenType::PC_enb};
            break;
          case 4: // rule D:\ProgrammingProjects\Logisim\32bitCPU_t3\libsLocal\ControlBits.l:22: "PC_load" :
#line 22 "D:\\ProgrammingProjects\\Logisim\\32bitCPU_t3\\libsLocal\\ControlBits.l"
return cb::Token{yytext, cb::TokenType::PC_load};

            break;
          case 5: // rule D:\ProgrammingProjects\Logisim\32bitCPU_t3\libsLocal\ControlBits.l:24: "MDR_we" :
#line 24 "D:\\ProgrammingProjects\\Logisim\\32bitCPU_t3\\libsLocal\\ControlBits.l"
return cb::Token{yytext, cb::TokenType::MDR_we};
            break;
          case 6: // rule D:\ProgrammingProjects\Logisim\32bitCPU_t3\libsLocal\ControlBits.l:25: "MDR_out" :
#line 25 "D:\\ProgrammingProjects\\Logisim\\32bitCPU_t3\\libsLocal\\ControlBits.l"
return cb::Token{yytext, cb::TokenType::MDR_out};
            break;
          case 7: // rule D:\ProgrammingProjects\Logisim\32bitCPU_t3\libsLocal\ControlBits.l:26: "IR_we" :
#line 26 "D:\\ProgrammingProjects\\Logisim\\32bitCPU_t3\\libsLocal\\ControlBits.l"
return cb::Token{yytext, cb::TokenType::IR_we};
            break;
          case 8: // rule D:\ProgrammingProjects\Logisim\32bitCPU_t3\libsLocal\ControlBits.l:27: "IR_out" :
#line 27 "D:\\ProgrammingProjects\\Logisim\\32bitCPU_t3\\libsLocal\\ControlBits.l"
return cb::Token{yytext, cb::TokenType::IR_out};
            break;
          case 9: // rule D:\ProgrammingProjects\Logisim\32bitCPU_t3\libsLocal\ControlBits.l:28: "TEMP_we" :
#line 28 "D:\\ProgrammingProjects\\Logisim\\32bitCPU_t3\\libsLocal\\ControlBits.l"
return cb::Token{yytext, cb::TokenType::TEMP_we};
            break;
          case 10: // rule D:\ProgrammingProjects\Logisim\32bitCPU_t3\libsLocal\ControlBits.l:29: "TEMP_out" :
#line 29 "D:\\ProgrammingProjects\\Logisim\\32bitCPU_t3\\libsLocal\\ControlBits.l"
return cb::Token{yytext, cb::TokenType::TEMP_out};
            break;
          case 11: // rule D:\ProgrammingProjects\Logisim\32bitCPU_t3\libsLocal\ControlBits.l:30: "Posta_we" :
#line 30 "D:\\ProgrammingProjects\\Logisim\\32bitCPU_t3\\libsLocal\\ControlBits.l"
return cb::Token{yytext, cb::TokenType::Posta_we};
            break;
          case 12: // rule D:\ProgrammingProjects\Logisim\32bitCPU_t3\libsLocal\ControlBits.l:31: "Posta_out" :
#line 31 "D:\\ProgrammingProjects\\Logisim\\32bitCPU_t3\\libsLocal\\ControlBits.l"
return cb::Token{yytext, cb::TokenType::Posta_out};
            break;
          case 13: // rule D:\ProgrammingProjects\Logisim\32bitCPU_t3\libsLocal\ControlBits.l:32: "ADR_we" :
#line 32 "D:\\ProgrammingProjects\\Logisim\\32bitCPU_t3\\libsLocal\\ControlBits.l"
return cb::Token{yytext, cb::TokenType::ADR_we};
            break;
          case 14: // rule D:\ProgrammingProjects\Logisim\32bitCPU_t3\libsLocal\ControlBits.l:33: "ADR_out" :
#line 33 "D:\\ProgrammingProjects\\Logisim\\32bitCPU_t3\\libsLocal\\ControlBits.l"
return cb::Token{yytext, cb::TokenType::ADR_out};

            break;
          case 15: // rule D:\ProgrammingProjects\Logisim\32bitCPU_t3\libsLocal\ControlBits.l:35: "I3B" :
#line 35 "D:\\ProgrammingProjects\\Logisim\\32bitCPU_t3\\libsLocal\\ControlBits.l"
return cb::Token{yytext, cb::TokenType::I3B};
            break;
          case 16: // rule D:\ProgrammingProjects\Logisim\32bitCPU_t3\libsLocal\ControlBits.l:36: "MAR_load" :
#line 36 "D:\\ProgrammingProjects\\Logisim\\32bitCPU_t3\\libsLocal\\ControlBits.l"
return cb::Token{yytext, cb::TokenType::MAR_load};
            break;
          case 17: // rule D:\ProgrammingProjects\Logisim\32bitCPU_t3\libsLocal\ControlBits.l:37: "MAR_we" :
#line 37 "D:\\ProgrammingProjects\\Logisim\\32bitCPU_t3\\libsLocal\\ControlBits.l"
return cb::Token{yytext, cb::TokenType::MAR_we};
            break;
          case 18: // rule D:\ProgrammingProjects\Logisim\32bitCPU_t3\libsLocal\ControlBits.l:38: "ACC_we" :
#line 38 "D:\\ProgrammingProjects\\Logisim\\32bitCPU_t3\\libsLocal\\ControlBits.l"
return cb::Token{yytext, cb::TokenType::ACC_we};

            break;
          case 19: // rule D:\ProgrammingProjects\Logisim\32bitCPU_t3\libsLocal\ControlBits.l:40: "FR_cls" :
#line 40 "D:\\ProgrammingProjects\\Logisim\\32bitCPU_t3\\libsLocal\\ControlBits.l"
return cb::Token{yytext, cb::TokenType::FR_cls};//flag reg
            break;
          case 20: // rule D:\ProgrammingProjects\Logisim\32bitCPU_t3\libsLocal\ControlBits.l:41: "ALU_in" :
#line 41 "D:\\ProgrammingProjects\\Logisim\\32bitCPU_t3\\libsLocal\\ControlBits.l"
return cb::Token{yytext, cb::TokenType::ALU_in};
            break;
          case 21: // rule D:\ProgrammingProjects\Logisim\32bitCPU_t3\libsLocal\ControlBits.l:42: "ALU_out" :
#line 42 "D:\\ProgrammingProjects\\Logisim\\32bitCPU_t3\\libsLocal\\ControlBits.l"
return cb::Token{yytext, cb::TokenType::ALU_out};

            break;
          case 22: // rule D:\ProgrammingProjects\Logisim\32bitCPU_t3\libsLocal\ControlBits.l:44: "REG_out" :
#line 44 "D:\\ProgrammingProjects\\Logisim\\32bitCPU_t3\\libsLocal\\ControlBits.l"
return cb::Token{yytext, cb::TokenType::REG_out};
            break;
          case 23: // rule D:\ProgrammingProjects\Logisim\32bitCPU_t3\libsLocal\ControlBits.l:45: "REG_in" :
#line 45 "D:\\ProgrammingProjects\\Logisim\\32bitCPU_t3\\libsLocal\\ControlBits.l"
return cb::Token{yytext, cb::TokenType::REG_in};

            break;
          case 24: // rule D:\ProgrammingProjects\Logisim\32bitCPU_t3\libsLocal\ControlBits.l:47: "@" :
#line 47 "D:\\ProgrammingProjects\\Logisim\\32bitCPU_t3\\libsLocal\\ControlBits.l"
return cb::Token{yytext, cb::TokenType::COMMENT};
            break;
          case 25: // rule D:\ProgrammingProjects\Logisim\32bitCPU_t3\libsLocal\ControlBits.l:48: "{" :
#line 48 "D:\\ProgrammingProjects\\Logisim\\32bitCPU_t3\\libsLocal\\ControlBits.l"
return cb::Token{yytext, cb::TokenType::LPAREN};
            break;
          case 26: // rule D:\ProgrammingProjects\Logisim\32bitCPU_t3\libsLocal\ControlBits.l:49: "}" :
#line 49 "D:\\ProgrammingProjects\\Logisim\\32bitCPU_t3\\libsLocal\\ControlBits.l"
return cb::Token{yytext, cb::TokenType::RPAREN};

            break;
          case 27: // rule D:\ProgrammingProjects\Logisim\32bitCPU_t3\libsLocal\ControlBits.l:51: "#" :
#line 51 "D:\\ProgrammingProjects\\Logisim\\32bitCPU_t3\\libsLocal\\ControlBits.l"
return cb::Token{yytext, cb::TokenType::HASH};

            break;
          case 28: // rule D:\ProgrammingProjects\Logisim\32bitCPU_t3\libsLocal\ControlBits.l:53: [ \t\n]+ :
#line 53 "D:\\ProgrammingProjects\\Logisim\\32bitCPU_t3\\libsLocal\\ControlBits.l"
{ /* skip whitespace */ }
            break;
          case 29: // rule D:\ProgrammingProjects\Logisim\32bitCPU_t3\libsLocal\ControlBits.l:54: . :
#line 54 "D:\\ProgrammingProjects\\Logisim\\32bitCPU_t3\\libsLocal\\ControlBits.l"
{ std::cout << "TOKEN: UNKNOWN (" << yytext << ")\n"; }

            break;
        }
  }
}
